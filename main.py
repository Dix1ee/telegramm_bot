import telebot
from telebot import types
import config
import requests
name = ' '
age = 0
bot = telebot.TeleBot(config.token)

response = requests.get(config.url).json()



@bot.message_handler(commands=['usd'])
def keyboard1(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton('USD')
    btn2 = types.KeyboardButton('EUR')
    btn3 = types.KeyboardButton('RUR')
    btn4 = types.KeyboardButton('BTC')
    markup.add(btn1, btn2, btn3, btn4)
    msg = bot.send_message(message.chat.id,
                               "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–π –∫—É—Ä—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç –∑–∞ 2014 –≥–æ–¥?\n–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –≤–∞–ª—é—Ç—É –≤ –ø–æ—è–≤–∏–≤—à–µ–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µüëá", reply_markup=markup)
    bot.register_next_step_handler(msg, process_coin_step)

def process_coin_step(message):
        try:
            markup = types.ReplyKeyboardRemove(False)

            for coin in response:
                if (message.text == coin['ccy']):
                    bot.send_message(message.chat.id, printCoin(coin['buy'], coin['sale']),
                                     reply_markup=markup, parse_mode="Markdown")

        except Exception as e:
            bot.reply_to(message, 'ooops!')


def printCoin(buy, sale):
        '''–í—ã–≤–æ–¥ –∫—É—Ä—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'''
        return "üí∞ *–ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏:* " + str(buy) + "\nüí∞ *–ö—É—Ä—Å –ø—Ä–æ–¥–∞–∂–∏:* " + str(sale)


@bot.message_handler(content_types=['text', 'document', 'audio'])
def echo_all(message):
    if message.text.lower() == '/start':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç–∏–∫! \n–ù–∞–ø–∏—à–∏ /reg —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –ø–æ–±–ª–∏–∂–µ')
    elif  message.text.lower() == '–ü—Ä–∏–≤–µ—Ç':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç–∏–∫!')
    elif message.text.lower() == '/help':
            bot.send_message(message.from_user.id, '–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n/usd - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∞–ª—é—Ç(2014–≥–æ–¥) \n/btc - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏—Ä–∂ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç ')
    elif message.text.lower() == '/reg':
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        bot.register_next_step_handler(message, reg_name)

def reg_name(message):
    global name
    name = message.text
    bot.send_message(message.from_user.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    bot.register_next_step_handler(message, reg_age)

def reg_age(message):
    global age
    age = message.text
    while age == 0:
        try:
                age = int(message.text)
        except Exception:
            bot.send_message(message, '–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—ã!!')


    keyboard = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text = '–î–∞', callback_data='yes')
    keyboard.add(key_yes)
    key_no = types.InlineKeyboardButton(text = '–ù–µ—Ç', callback_data='no')
    keyboard.add(key_no)

    question =  '–¢–µ–±–µ ' + str(age) + ' –ª–µ—Ç. –ò —Ç–µ–±—è –∑–æ–≤—É—Ç: ' + name +'?'
    bot.send_message(message.from_user.id, text = question, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
        if call.data == 'yes':
            bot.send_message(call.message.chat.id, '–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –¢—ã –≤—Å–µ —Å–¥–µ–ª–∞–ª –≤–µ—Ä–Ω–æ‚ò∫\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–∏—Ö –∫–æ–º–∞–Ω–¥, –Ω–∞–ø–∏—à–∏ /help', )
        elif call.data -- 'no':
            bot.send_message(call.message.chat.id, '–£–ø—Å... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑')
            bot.send_message(call.message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
            bot.send_message(call.message, reg_name)








if __name__== '__main__':
    bot.polling(none_stop=True)